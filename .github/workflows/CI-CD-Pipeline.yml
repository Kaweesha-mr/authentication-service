name: CI Pipeline with Docker Compose

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  build-test-run:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Java with a specified version (e.g., OpenJDK 17)
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'  # Adjust to your desired version

      # Set up Docker and Docker Compose
      - name: Set up Docker and Docker Compose
        uses: docker/setup-buildx-action@v2

      # Install Docker Compose (specific version)
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Set up environment variables from secrets and other config
      - name: Set up environment file (.env)
        run: |
          echo "APPLICATION_PORT=8080" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_URL=jdbc:postgresql://localhost:5432/auth" >> .env
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
          echo "EMAIL_SERVICE_NAME=NODEJS-MAIL-SERVICE" >> .env
          echo "EUREKA_ENABLED=false" >> .env

      # Start required services using Docker Compose
      - name: Start required services with Docker Compose
        run: docker-compose up -d

      # Wait for the Database to be ready
      - name: Wait for Database to Be Ready
        run: sleep 10  # Adjust based on your DB startup time

      # Build and Test the Application
      - name: Build and Test the Application
        run: |
          mvn clean install -DskipTests
          mvn test

      # Run the Spring Boot Application in the background
      - name: Run the Application
        env:
          APPLICATION_PORT: 8080
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_URL: jdbc:postgresql://localhost:5432/auth
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
        run: mvn spring-boot:run &

      # Verify if the application is running
      - name: Verify Application is Running
        run: sleep 10  # Adjust the time as needed for the app to start

      # Stop the Spring Boot application
      - name: Stop the Application
        run: pkill -f 'spring-boot:run'

      # Tear down the Docker services
      - name: Tear Down Docker Services
        run: docker-compose down
